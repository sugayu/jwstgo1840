#+title: JWST custom pipeline for GO1840

* Installation
** conda environment
First, it is recommended to create a new Python environment using ~conda~ and to work in the virtual environment.
This is an example to create a virtual environment ~jwstcal~ (shared by Ken).
Please specify a <version> that you want to download (like "1.14.0").
#+begin_src bash
  # for Mac
  conda create -n jwstcal --file https://ssb.stsci.edu/releases/jwstdp/<version>/conda_python_macos-stable-deps.txt
  # for Linux
  conda create -n jwstcal --file https://ssb.stsci.edu/releases/jwstdp/<version>/conda_python_stable-deps.txt

  conda activate jwstcal

  # for Mac
  pip install -r https://ssb.stsci.edu/releases/jwstdp/<version>/reqs_macos-stable-deps.txt
  # for Linux
  pip install -r https://ssb.stsci.edu/releases/jwstdp/<version>/reqs_stable-deps.txt

  pip install jdaviz
  pip install jupyter
  pip install multiprocess        # methods of multiprocessing used by Alex
#+end_src

If you failed ~pip install -r ....txt~, the following code might help you.
#+begin_src bash
  curl https://ssb.stsci.edu/releases/jwstdp/<version>/reqs_macos-stable-deps.txt > reqs_macos-stable-deps.txt
  # Edit the downloaded file to remove "codecov==2.1.12".
  pip install -r reqs_macos-stable-deps.txt
#+end_src

** pip install
When the Github repository is public, you can install ~jwstgo1840~ using ~pip~:
#+begin_src bash
  pip install git+https://github.com/sugayu/jwstgo1840.git  # this may not be working.
#+end_src
However, ~jwstgo1840~ is currently private; therefore, you have to pass an authentication.

There are two ways of authentication.
The first way would be recommend if you can use SSH.

1 --- SSH public key authentication.

   If you put your public key in Github, you can access to and pip the repository with
#+begin_src bash
  pip install git+ssh://git@github.com/sugayu/jwstgo1840.git
#+end_src


2 --- HTTP connection with personal access token authentication.

   If you have a personal access token created in Github, you can use it as
#+begin_src bash
  pip install git+https://YOUR_GITHUB_TOKEN@github.com/sugayu/jwstgo1840.git
#+end_src
   where ~YOUR_GITHUB_TOKEN~ is your personal access token.
   Please google details of the token.

To update the package, you may need to add the ~--upgrade~ option.
#+begin_src bash
  pip install --upgrade git+https://github.com/sugayu/jwstgo1840.git  # this may not be working too.
#+end_src

* Short description
** Implementations
In our custom pipeline, we added (currently) two reduction steps during the process of the JWST official pipeline.
One is AfterDetector1Pipeline and the other is AfterSpec2Pipeline.

In AfterDetector1Pipeline, there are three additional reduction processes:

  1.masking outliers (including hot pixels),
  1.subtracting 1/f noises,
  1.sigma clipping.

Present pipeline may not need the sigma clipping, so that it is turned off in the example below.

In AfterSpec2Pipeline, there are additional reduction processes:

  1. clipping pixels with MSA_FAILED_OPEN
  1. masking objects signal pixels
  1. sigma clipping
  1. masking slit edges
  1. subtracting global background.
  1. subtracting slit backgrounds (optional)

** Not implemented (or to do)
The custom pipeline does not include

  1. wcs matching,
  1. local background subtraction

Functions needed for wcs matching has been already written in the code,
but this step needs additional emission-line maps created from NIRCam images.
Therefore, the wcs matching is not automatically processed in the current custom pipeline.

From discussions in team meetings and external meetings, we concluded that the flux calibration is converged in the JWST official pipeline.
Therefore, additional flux calibration steps are not implemented.

* Example
** NIRSpec reduction
Examples are written in the example directory.

An example of NIRSpec calibration is written in example/calib_nirspecifu.py.

** Create _cal.fits mask
~NIRSpecIFUMask~ provides a mask for _cal.fits that corresponds to a circular mask in the sky.
This will help to mask objects for additional reductions like strict sigma clipping.

Example usage:
#+begin_src python
  import astropy.units as u
  from astropy.coordinates import SkyCoord
  from jwstgo1840.nirspec.masking import NIRSpecIFUMask

  fname3d = 'calib/example/product_name_g395h-f290lp_s3d.fits'
  fname2d = 'calib/example/jw01840017001_02101_00001_nrs2_2_cal.fits'

  ifumask = NIRSpecIFUMask(fname3d)
  positions = SkyCoord([
      ('00h14m24.9217s', '-30d22m56.160s'),
      ('00h14m24.9291s', '-30d22m54.956s'),
      ('00h14m24.9098s', '-30d22m54.936s'),
      ('00h14m24.8742s', '-30d22m54.998s'),
      ('00h14m24.7796s', '-30d22m56.020s'),
  ])
  radii = [
      0.4,
      0.4,
      0.3,
      0.3,
      0.4,
  ] * u.arcsec
  waves = [
      [4.3, 4.5],
      [4.4445, 4.45],
      [4.442, 4.448],
      [4.442, 4.447],
      [4.44, 4.446],
  ] * u.um
  ifumask.add_circularmasks(positions, radii, waves)
  mask2d = ifumask.mask_cal2d(fname2d)
#+end_src

This object masking is now implemented in the latest version of AfterSpec2Pipeline.
Please see an example usege in example/calib_nirspecifu.py.

** WCS in _cal.fits
~wcs_calfits~ provides RA, DEC, and wavelengths for _cal.fits.

#+begin_src python
  from jwst import datamodels
  from jwstgo1840.nirspec.background import wcs_calfits

  fname = 'calib/example/jw01840017001_02101_00001_nrs1_2_cal.fits'
  datamodel = datamodels.open(fname)
  radecw = wcs_calfits(datamodel)
#+end_src

* Release Notes
** version 0.3.4
- Fix bugs (Detector1 params in example, output directory, 1/f noise subt. w/o masking outliers)

** version 0.3.3
- Apply object masks when computing global background
- Enable to make a name of the final 3d data cube.
  Please use ~product_name~ keyword in ~CreateAsnFile.dump()~ (see ~example/calib_nirspecifu.py~)
- Minor changes:
  - Raise exceptions when object masks are not well defined as we assumed
  - Turn off warnings for sigma_clip when data includes NaN

** version 0.3.2
- Fix the way to import dqflags by applying current jwst pipeline implementation

** version 0.3.1
- Raise errors when nrs2 is processed for inappropreate filters in AfterDetector1Pipeline
- Fix type of datamodels

** version 0.3.0
- Add objmask step to mask objects for 5 sigma clipping

** version 0.2.0
- Add an option to subtract slit backgrounds after global background subtraction
- Mask MSA_FAILED_OPEN
- Improve slit edge masking by increasing edge widths
- Add function to create object masks for cal.fits
